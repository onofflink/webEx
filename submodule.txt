


YYY
 |- .git  <-- Project .git
 |-  ZZZ  <-- Project ZZZ
      |- .git <-- Don't add this
      |- (project files) <-- do add these
 |-  QQQ  <-- just another folder with..
      |-  MMM  <-- Project MMM inside
           |- .git <-- Don't add this
           |- (project files) <-- do add these

 |-  (project files)

remove cached entry

git rm --cached web/libraries/randomLibrary
then add all files in that folder

 git add web/libraries/randomLibrary/*
then add all

 git add --all && git commit -m "Message"

.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 In the following answer, you will know how to extract a folder from a repository and make a git repository from it and then including it as a submodule instead of a folder.

Inspired from Gerg Bayer's article Moving Files from one Git Repository to Another, Preserving History

At the beginning, we have something like this:

<git repository A>
    someFolders
    someFiles
    someLib <-- we want this to be a new repo and a git submodule!
        some files
In the steps bellow, I will refer this someLib as <directory 1>.

At the end, we will have something like this:

<git repository A>
    someFolders
    someFiles
    @submodule --> <git repository B>

<git repository B>
    someFolders
    someFiles
Create a new git repository from a folder in an other repository
Step 1
Get a fresh copy of the repository to split.

git clone <git repository A url>
cd <git repository A directory>
Step 2
The current folder will be the new repository so remove the current remote.

git remote rm origin
Step 3
Extract history of the desired folder and commit it

git filter-branch --subdirectory-filter <directory 1> -- --all
You should now have a git repository with the files from directory 1 in your repo's root with all related commit history.

Step 4
Create your online repository and push your new repository!

git remote add origin <git repository B url>
git push
You may need to set the upstream branch for your first push

git push --set-upstream origin master
Clean <git repository A> (optional, see comments)
We want to delete traces (files and commit history) of <git repository B> from <git repository A> so history for this folder is only there once.

This is based on Removing sensitive data from github.

Go to a new folder and

git clone <git repository A url>
cd <git repository A directory>
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <directory 1> -r' --prune-empty --tag-name-filter cat -- --all
Replace <directory 1> by the folder you want to remove. -r will do it recursively inside the specified directory :). Now push to origin/master with --force

git push origin master --force
Boss Stage (See Note below)
Create a submodule from <git repository B> into <git repository A>

git submodule add <git repository B url>
git submodule update
git commit
Verify if everything worked as expected and push

git push origin master
Note
After doing all of this, I realized in my case that it was more appropriate to use npm to manage my own dependencies instead. We can specify git urls and versions, see the package.json git urls as dependencies.

If you do it this way, the repository you want to use as a requirement must be an npm module so it must contain a package.json file or you'll get this error: Error: ENOENT, open 'tmp.tgz-unpack/package.json'.

tldr (alternative solution)
You may find it easier to use npm and manage dependencies with git urls:

Move folder to a new repository
run npm init inside both repositories
run npm install --save git://github.com/user/project.git#commit-ish where you want your dependencies installed
alias.a !git config --global
echo alias.f '!git fetch --all && git rebase origin/master' >>submodule.txt
alias.amd !git add -A && git commit --amend --no-edit
alias.sub !git submodule update --init --recursive
alias.p !git push origin $(git rev-parse --abbrev-ref HEAD)
alias.submodule '!git clone --recurse-submodules -j8'
lc '!git log ORIG_HEAD.. --stat --no-merges'
alias.upstream !git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)
alias.unstream !git branch --unset-upstream $(git rev-parse --abbrev-ref HEAD)
## https://git.wiki.kernel.org/index.php/Aliases

cat file1 file2 > tmp ; mv tmp newfile

git reset에 대한 참고 자료
https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html

--soft
--mixed
--hard
-f -d -x

## folder there
tree /a /f >gogleDocTree.txt

> file replaced
>> append to the contents of a file
(in use with cat)
touch "blah blah blah" | cat - abc.txt (""를 abc 내용 맨 위에 삽입)
edit = "!f() { $(git config core.editor) -- $@; }; f"
reedit = "!f() { $(git config core.editor) -- $(git diff --name-only $1); }; f"
edit-unmerged '!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; code `f`'
add-unmerged '!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`'
[diff]
        tool = vscode
    [difftool "vscode"]
        cmd = code --wait --new-window --diff $LOCAL $REMOTE
        prompt = false

    
## n-commit; branch off n-3

git branch branchname <sha1-of-commit>
git checkout -b branchname HEAD~n

git diff --stat origin/tests
git log tests --not --remotes --decorate

git rev-list --all filename
git rev-list origin/user/bob/testbranch -1 src/bfiles/*.txt

conflicts = !git diff --name-only --diff-filter=U | grep -oE '[^/ ]+$'

---------------------------- end of may 28
alias.lt !git log --stat --pretty="format:%h%an%ai%f"
alias.pr !f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f
alias.pr-clean !git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref; do branch=${ref#refs/heads/} ; git branch -D $branch ;

find = !git log --pretty=\"format:%Cgreen%H %Cblue%s\" --name-status --grep

mysql root reset method

service mysqld stop
/usr/bin/mysqld_safe --skip-grant &

mysql
use mysql
update user set password=password('{비밀번호}') where user='root';
flush privileges;
service mysqld restart

server date setting procedure
[root@freepbx ~]# date -s "2019-06-20 09:48"                                                               
Thu Jun 20 09:48:00 KST 2019                                                                               
[root@freepbx ~]# hwclock --localtime --systohc                                                            
[root@freepbx ~]# date                                                                                     
Thu Jun 20 09:48:41 KST 2019                                                                               
[root@freepbx ~]# hwclock -r                                                                               
Thu 20 Jun 2019 09:49:00 AM KST  -0.109917 seconds                                                         
[root@freepbx ~]# service asterisk restart                                                                 
Restarting asterisk (via systemctl):                       [  OK  ]                                        
[root@freepbx ~]# php -r 'echo date("Ymd")';                                                               
PHP Parse error:  syntax error, unexpected end of file, expecting ',' or ';' in Command line code on line 1

how to create and add ssh keys and upload to a server to be effective

<p>SSH의 기본 포트는 22번을 사용하게 되는데 보안을 위해 다른 포트로 변경하여 운영해야 할 경우가 있다. 이러면 아래와 같이 설정함으로써 기본 포트를 변경할 수 있다.</p>
<p>vi /etc/ssh/sshd_config</p>
<pre><code>Port 22  ## 이 부분을 찾아 원하는 포트로 변경
</code></pre>

<h3>SSH Key 생성 <a id="h_09a06dc126b5916f5850ab067bdfc2bf" href="#h_09a06dc126b5916f5850ab067bdfc2bf" class="caret-target">#</a></h3>
<pre><code>[user@localhost ~]$ ssh-keygen -t rsa
</code></pre>

<pre><code>[user@localhost ~]$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
</code></pre>

<pre><code>[user@localhost ~]$ ls -al .ssh
total 24
drwx------.  2 user user 4096 May 23 23:39 .
drwx------. 44 user user 4096 May 14 11:14 ..
-rw-------.  1 user user 1675 May 23 23:39 id_rsa
-rw-r--r--.  1 user user  393 May 23 23:39 id_rsa.pub
-rw-r--r--.  1 user user 2400 Apr 18 16:47 known_hosts
</code></pre>

<pre><code>[user@localhost ~]$ scp .ssh/id_rsa.pub user@server:./
</code></pre>

<p>이후 서버에 SSH접속을 하여 인증키 파일 안에 공개키를 추가해준다. 아래와 같이 실행하면 기존에 만들어져 있던 인증키 파일에 내가 올린 공개키가 추가된다.</p>
<pre><code>[user@localhost ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys
</code></pre>

<pre><code>[user@localhost ~]$ mkdir .ssh       # 만약 .ssh폴더가 없다면 만들어주자
[user@localhost ~]$ chmod 700 .ssh   # 인증키 등이 보관되는 폴더이므로 다른 사람이 보지 못하도록 권한을 설정해야 한다.
[user@localhost ~]$ touch .ssh/authorized_keys # 빈 인증키 파일 생성
[user@localhost ~]$ chmod 600 .ssh/authorized_keys # 역시 다른 사람이 읽지 못하도록 권한 설정
[user@localhost ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys # 올린 공개키를 인증키 파일에 추가하기
</code></pre>

